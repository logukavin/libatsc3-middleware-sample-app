plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'de.mobilej.unmock'
}

unMock {
    keep "android.net.Uri"
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        ndk {
            if (project.hasProperty('org.gradle.project.debugging_hwasan_enabled') && project.property('org.gradle.project.debugging_hwasan_enabled').toString().toBoolean()) {
                abiFilters 'arm64-v8a'
            } else {
                abiFilters 'arm64-v8a', 'armeabi-v7a' //, 'armeabi-v7a' //, 'arm64-v8a' //'', 'x86_64',
            }
        }

        externalNativeBuild {
            ndkBuild {
                if (project.hasProperty('org.gradle.project.debugging_asan_enabled') && project.property('org.gradle.project.debugging_asan_enabled').toString().toBoolean()) {
                    arguments "debugging_asan_enabled=true"
                } else if (project.hasProperty('org.gradle.project.debugging_hwasan_enabled') && project.property('org.gradle.project.debugging_hwasan_enabled').toString().toBoolean()) {
                    arguments "debugging_hwasan_enabled=true"
                } else if (project.hasProperty('org.gradle.project.debugging_g_optimization_zero_flags') && project.property('org.gradle.project.debugging_g_optimization_zero_flags').toString().toBoolean()) {
                    arguments "debugging_g_optimization_zero_flags=true"
                }
            }
        }

        resValue("string", "defaultActionWatch", "com.nextgenbroadcast.mobile.middleware.sample.action.watch")
        resValue("string", "nextgenMediaFileProvider", "com.nextgenbroadcast.mobile.middleware.provider.dash")
        resValue("string", "nextgenMMTContentProvider", "com.nextgenbroadcast.mobile.middleware.provider.mmt")
        resValue("string", "nextgenServicesGuideProvider", "com.nextgenbroadcast.mobile.middleware.provider.esg")
        resValue("string", "receiverContentProvider", "com.nextgenbroadcast.mobile.middleware.provider.content")

        resValue("bool", "telemetryEnabled", "false")
        resValue("bool", "testAlertsEnabled", "true")

        buildConfigField("String", "SinclairPlatformUrl", "\"https://prod-property-gateway.sinclairplatform.com\"")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            jniDebuggable = true
        }
    }

    if (!isTasksContainsTest()) {
        externalNativeBuild {
            ndkBuild {
                path 'Android.mk'
            }
        }
    }

    packagingOptions {
        // specify the path to your object binaries, or generally:
        doNotStrip '**.so'
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
    }

    flavorDimensions "service_type"
    productFlavors {
        embedded {
            dimension "service_type"
        }

        standalone {
            dimension "service_type"
        }
    }
}

def isTasksContainsTest() {
    def result = false
    gradle.startParameter.taskNames.each { name ->
        if (name.contains("test")) {
            result = true
        }
    }
    return result
}

def libatsc3Version = rootProject.ext.libatsc3Version
def coreKtxVersion = rootProject.ext.coreKtxVersion
def coroutinesVersion = rootProject.ext.coroutinesVersion
def startupRuntime = rootProject.ext.startupRuntime
def jettyVersion = '9.4.38.v20210224'
def powermock_version = "2.0.9"
def roomVersion = "2.3.0"
def kronosVersion = "0.0.1-alpha11"


dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    if (project.hasProperty('org.gradle.project.use_local_src_libatsc3_folder') && project.property('org.gradle.project.use_local_src_libatsc3_folder').toString().toBoolean()) {
        implementation project(":atsc3_core")
        implementation project(":atsc3_bridge")
        implementation project(":atsc3_bridge_media_mmt")
        implementation project(":atsc3_phy_virtual")

        if (project.hasProperty('org.gradle.project.phy_saankhya_enabled') && project.property('org.gradle.project.phy_saankhya_enabled').toString().toBoolean()) {
            implementation project(":atsc3_phy_saankhya")
        }
        if (project.hasProperty('org.gradle.project.phy_lowasis_enabled') && project.property('org.gradle.project.phy_lowasis_enabled').toString().toBoolean()) {
            implementation project(":atsc3_phy_lowasis")
        }
        if (project.hasProperty('org.gradle.project.phy_airwavz_enabled') && project.property('org.gradle.project.phy_airwavz_enabled').toString().toBoolean()) {
            implementation project(":atsc3_phy_airwavz")
        }
    } else {
        implementation "org.ngbp.libatsc3:atsc3_core:$libatsc3Version"
        implementation "org.ngbp.libatsc3:atsc3_bridge:$libatsc3Version"
        implementation "org.ngbp.libatsc3:atsc3_bridge_media_mmt:$libatsc3Version"
        implementation "org.ngbp.libatsc3:atsc3_phy_virtual:$libatsc3Version"

        if (project.hasProperty('org.gradle.project.phy_saankhya_enabled') && project.property('org.gradle.project.phy_saankhya_enabled').toString().toBoolean()) {
            implementation "org.ngbp.libatsc3:atsc3_phy_saankhya:$libatsc3Version"
        }
        if (project.hasProperty('org.gradle.project.phy_lowasis_enabled') && project.property('org.gradle.project.phy_lowasis_enabled').toString().toBoolean()) {
            implementation "org.ngbp.libatsc3:atsc3_phy_lowasis:$libatsc3Version"
        }
        if (project.hasProperty('org.gradle.project.phy_airwavz_enabled') && project.property('org.gradle.project.phy_airwavz_enabled').toString().toBoolean()) {
            implementation "org.ngbp.libatsc3:atsc3_phy_airwavz:$libatsc3Version"
        }
    }

    // TODO: remove this after removing dependency in MMTContentProvider
    if (project.hasProperty('org.gradle.project.use_local_src_exoplayer_folder') && project.property('org.gradle.project.use_local_src_exoplayer_folder').toString().toBoolean()) {
        implementation project(':exoplayer-extension-mmt')
    } else {
        compileOnly "com.google.android.exoplayer:exoplayer-mmt:$exoplayerVersion"
    }

    implementation project(":nextgen-core")
    implementation project(":nextgen-player")
    compileOnly project(":nextgen-dev")

    implementation 'com.github.nmuzhichin:jsonrpc-core:1.0.4.3'
    implementation 'com.github.nmuzhichin:jsonrpc-jackson-extension:1.0.4.3'

    implementation 'org.apache.commons:commons-lang3:3.9'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:$coreKtxVersion"
    implementation 'androidx.appcompat:appcompat:1.3.1'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'
    implementation 'com.google.code.gson:gson:2.8.6'

    implementation "org.eclipse.jetty:jetty-server:$jettyVersion"
    implementation "org.eclipse.jetty:jetty-servlet:$jettyVersion"
    implementation "org.eclipse.jetty.websocket:websocket-server:$jettyVersion"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    implementation "androidx.startup:startup-runtime:$startupRuntime"

    implementation "com.squareup.okhttp3:okhttp:4.9.0"
    implementation "com.squareup.okio:okio:2.8.0"

    implementation "com.squareup.tape2:tape:2.0.0-beta1"

    implementation "androidx.work:work-runtime-ktx:2.5.0"

    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    implementation "androidx.media:media:1.4.1"

    implementation 'androidx.security:security-crypto:1.1.0-alpha03'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.56'

    implementation 'com.google.firebase:firebase-crashlytics-ktx:18.2.1'

    //jjustman-2021-08-31 - hack for ntp local clock
    implementation "com.lyft.kronos:kronos-android:$kronosVersion"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation 'androidx.test:core:1.4.0'
    testImplementation "android.arch.core:core-testing:1.1.1"
    testImplementation "org.powermock:powermock-module-junit4:$powermock_version"
    testImplementation "org.powermock:powermock-api-mockito2:$powermock_version"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.8'
    testImplementation "android.arch.core:core-testing:1.1.1"
}

//apply from: '../publish.gradle'
apply from: '../publish-dependencies.gradle'

afterEvaluate {
    publishing {
        publications {
            embeddedRelease(MavenPublication) {
                groupId = 'com.nextgenbroadcast.mobile'
                version = project.hasProperty('artifactVersion') ? artifactVersion : null
                artifactId = project.name
                from components.embeddedRelease
            }
            standaloneRelease(MavenPublication) {
                groupId = 'com.nextgenbroadcast.mobile'
                version = project.hasProperty('artifactVersion') ? artifactVersion : null
                artifactId = project.name + "-stln"
                from components.standaloneRelease
            }
        }
    }
}