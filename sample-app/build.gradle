apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'

def appVersionCode = project.hasProperty('versionCode') ? versionCode.toInteger() : 4
def appVersion = "1.0.3"

def getCertPropertyCode(propertyName) {
    if (!ext.hasProperty('keystoreProperties')) {
        ext.keystoreProperties = new Properties()
        ext.keystoreProperties.load(new FileInputStream(rootProject.file("keystore.properties")))
    }

    return project.hasProperty(propertyName) ? project.property(propertyName) : keystoreProperties[propertyName]
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    defaultConfig {
        applicationId "com.nextgenbroadcast.mobile.middleware.sample"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode appVersionCode
        versionName appVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file(getCertPropertyCode('storeFile'))
            storePassword getCertPropertyCode('password')
            keyAlias getCertPropertyCode('keyAlias')
            keyPassword getCertPropertyCode('keyPassword')
        }
    }

    buildTypes {
        debug {
            versionNameSuffix ".${appVersionCode}"
        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    flavorDimensions "service_type"
    productFlavors {
        embedded {
            dimension "service_type"
            resValue "string", "app_name", "Atsc3 Sample App"
        }

        standalone {
            dimension "service_type"
            applicationIdSuffix ".standalone"
            resValue "string", "app_name", "Atsc3 Standalone Sample App"
            resValue "string", "nextgenMediaFileProvider", "com.nextgenbroadcast.mobile.middleware.provider.dash.tv"
            resValue("string", "nextgenMMTContentProvider", "com.nextgenbroadcast.mobile.middleware.provider.mmt.tv")
            resValue("string", "nextgenServicesGuideProvider", "com.nextgenbroadcast.mobile.middleware.provider.esg.tv")
        }

        light {
            dimension "service_type"
            applicationIdSuffix ".light"
            resValue "string", "app_name", "Atsc3 Light Sample App"
        }
    }

    sourceSets {
        main {
            if (project.hasProperty('org.gradle.project.debugging_asan_enabled') && project.property('org.gradle.project.debugging_asan_enabled').toString().toBoolean()) {
                jniLibs.srcDirs = ["libs", "libs_asan"]
                resources.srcDirs = ["src/main/resources_asan"]
            } else if (project.hasProperty('org.gradle.project.debugging_hwasan_enabled') && project.property('org.gradle.project.debugging_hwasan_enabled').toString().toBoolean()) {
                jniLibs.srcDirs = ["libs", "libs_hwasan"]
                resources.srcDirs = ["src/main/resources_hwasan"]
            } else {
                jniLibs.srcDirs = ["libs"]
            }

        }
    }

    buildFeatures {
        dataBinding = true
    }

    packagingOptions {
        doNotStrip '**.so'

        pickFirst 'lib/arm64-v8a/libcrypto.so'
        pickFirst 'lib/arm64-v8a/libssl.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'

        pickFirst 'lib/armeabi-v7a/libcrypto.so'
        pickFirst 'lib/armeabi-v7a/libssl.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'

    }

    applicationVariants.all { variant ->
        variant.outputs.all {output ->
            outputFileName = outputFileName.replace(".apk", "-${defaultConfig.versionName}.${appVersionCode}.apk")
        }
    }
}

def coreKtxVersion = rootProject.ext.coreKtxVersion
def daggerVersion = rootProject.ext.daggerVersion
def lifecycleVersion = rootProject.ext.lifecycleVersion
def coroutinesVersion = rootProject.ext.coroutinesVersion
def startupRuntime = rootProject.ext.startupRuntime
def exoplayerVersion = rootProject.ext.exoplayerVersion

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(":nextgen-core")
    implementation project(":nextgen-view")
    implementation project(":nextgen-player")

    implementation 'com.google.android.play:core-ktx:1.7.0'

    embeddedImplementation project(":nextgen-middleware")

    standaloneImplementation project(":nextgen-middleware")

    implementation "androidx.core:core-ktx:$coreKtxVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    implementation 'androidx.activity:activity-ktx:1.2.1'
    implementation 'androidx.fragment:fragment-ktx:1.3.1'

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-service:$lifecycleVersion"

    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"

    implementation "androidx.coordinatorlayout:coordinatorlayout:1.1.0"
    implementation 'com.google.android.material:material:1.3.0'

    standaloneImplementation "androidx.startup:startup-runtime:$startupRuntime"
    standaloneImplementation "androidx.work:work-multiprocess:2.5.0"

    if (project.hasProperty('org.gradle.project.use_local_src_exoplayer_folder') && project.property('org.gradle.project.use_local_src_exoplayer_folder').toString().toBoolean()) {
        implementation project(':exoplayer-library-core')
        implementation project(':exoplayer-library-dash')
        implementation project(':exoplayer-library-ui')
        implementation project(':exoplayer-extension-daa')
        implementation project(':exoplayer-extension-mmt')
    } else {
        implementation "com.google.android.exoplayer:exoplayer-core:$exoplayerVersion"
        implementation "com.google.android.exoplayer:exoplayer-dash:$exoplayerVersion"
        implementation "com.google.android.exoplayer:exoplayer-ui:$exoplayerVersion"
        implementation "com.google.android.exoplayer:exoplayer-daa:$exoplayerVersion"
        implementation "com.google.android.exoplayer:exoplayer-mmt:$exoplayerVersion"
    }

    implementation 'com.google.android.gms:play-services-basement:17.6.0'
    implementation 'com.google.firebase:firebase-analytics-ktx:18.0.2'
    implementation 'com.google.firebase:firebase-crashlytics-ktx:17.4.0'
    //jjustman-2021-01-14 - adding firebase performance
    implementation 'com.google.firebase:firebase-perf:19.1.1'

    implementation 'org.slf4j:slf4j-nop:1.7.25'

    implementation "androidx.media:media:1.2.1"
}
